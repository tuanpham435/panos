---
- name: Check PAN-OS schedule objects and related security rules
  hosts: panorama
  connection: local
  gather_facts: false
  
  vars:
    provider:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"
    warning_days: 7
      
  tasks:
    - name: Get current date and warning date
      ansible.builtin.set_fact:
        current_date: "{{ lookup('pipe', 'date +%Y/%m/%d') }}"
        warning_date: "{{ lookup('pipe', 'date -d \"+{{ warning_days }} days\" +%Y/%m/%d') }}"

    - name: Gather schedule objects
      paloaltonetworks.panos.panos_schedule_object:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: schedule_objects

    - name: Filter non-recurring schedules
      set_fact:
        non_recurring_schedules: >-
          {{ schedule_objects.gathered | 
             selectattr('type', 'equalto', 'non-recurring') | 
             selectattr('non_recurring_date_time', 'defined') | 
             list }}

    - name: Find expiring schedules
      set_fact:
        expiring_schedules: |
          {% set result = [] %}
          {% for schedule in non_recurring_schedules %}
            {% for datetime in schedule.non_recurring_date_time %}
              {% set end_date = datetime.split('-')[1].split('@')[0] %}
              {% if end_date >= current_date and end_date <= warning_date %}
                {% if schedule.name not in result %}
                  {{ result.append(schedule.name) }}
                {% endif %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          {{ result }}

    - name: Gather security rules
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: security_rules
      when: expiring_schedules|from_yaml|length > 0

    - name: Find affected rules
      set_fact:
        affected_rules: >-
          {{ security_rules.gathered | 
             selectattr('schedule', 'defined') |
             selectattr('schedule', 'in', expiring_schedules|from_yaml) |
             map(attribute='rule_name') |
             list }}
      when: security_rules is defined and security_rules.gathered is defined

    - name: Show affected rules
      debug:
        msg: "Affected rule: {{ item }}"
      loop: "{{ affected_rules | default([]) }}"
      when: affected_rules is defined and affected_rules | length > 0