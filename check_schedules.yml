---
- name: Check PAN-OS schedule objects and related security rules
  hosts: panorama
  connection: local
  gather_facts: false
  
  vars:
    provider:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"
    warning_days: 7
    smtp_port: 587
    
  pre_tasks:
    - name: Verify required variables
      assert:
        that:
          - ip_address is defined
          - username is defined
          - password is defined
          - smtp_host is defined
          - smtp_port is defined
          - smtp_username is defined
          - smtp_password is defined
          - mail_from is defined
          - mail_to is defined
        fail_msg: "Missing required variables. Please define all required variables."
      
  tasks:
    - name: Get current date and warning date
      ansible.builtin.set_fact:
        current_date: "{{ lookup('pipe', 'date +%Y/%m/%d') }}"
        warning_date: "{{ lookup('pipe', 'date -d \"+{{ warning_days }} days\" +%Y/%m/%d') }}"

    - name: Gather non-recurring schedule objects
      paloaltonetworks.panos.panos_schedule_object:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: 'type == "non-recurring" and non_recurring_date_time is-not-none'
      register: non_recurring_schedules

    - name: Find expiring schedules
      set_fact:
        expiring_schedules: |
          {% set result = [] %}
          {% for schedule in non_recurring_schedules.gathered %}
            {% for datetime in schedule.non_recurring_date_time %}
              {% set end_date = datetime.split('-')[1].split('@')[0] %}
              {% if end_date >= current_date and end_date <= warning_date %}
                {% if schedule.name not in result %}
                  {{ result.append(schedule.name) }}
                {% endif %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          {{ result }}

    - name: Gather security rules
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: security_rules
      when: expiring_schedules|from_yaml|length > 0

    - name: Find affected rules
      set_fact:
        affected_rules: >-
          {{ security_rules.gathered | 
             selectattr('schedule', 'defined') |
             selectattr('schedule', 'in', expiring_schedules|from_yaml) |
             map(attribute='rule_name') |
             list }}
      when: security_rules is defined and security_rules.gathered is defined
      
    - name: Notify expiring rules
      when: affected_rules is defined and affected_rules | length > 0
      block:
        - name: Show affected rules
          debug:
            msg: "Security Rule: {{ item }}"
          loop: "{{ affected_rules | default([]) }}"
      
        - name: Send email notification
          ansible.builtin.mail:
            host: "{{ smtp_host }}"
            port: "{{ smtp_port }}"
            username: "{{ smtp_username }}"
            password: "{{ smtp_password }}"
            from: "{{ mail_from }}"
            to: "{{ mail_to }}"
            subject: "PAN-OS Security Rules Expiration Warning"
            body: "{{ lookup('template', 'templates/mail_expiring_rules.j2') }}"
            secure: always