---
- name: Check PAN-OS schedule objects and related security rules
  hosts: panorama
  connection: local
  gather_facts: false
  
  vars:
    provider:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"
    warning_days: 7
      
  tasks:
    - name: Get current date and warning date
      ansible.builtin.set_fact:
        current_date: "{{ lookup('pipe', 'date +%Y/%m/%d') }}"
        warning_date: "{{ lookup('pipe', 'date -d \"+{{ warning_days }} days\" +%Y/%m/%d') }}"

    - name: Gather schedule objects
      paloaltonetworks.panos.panos_schedule_object:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: schedule_objects

    # Debug schedule objects
    - name: Debug schedule objects
      debug:
        var: schedule_objects
        verbosity: 1

    - name: Parse schedule end dates
      set_fact:
        schedule_info: "{{ schedule_info_temp }}"
      vars:
        schedule_date_range: "{{ item.non_recurring_date_time[0].split('-') }}"
        schedule_info_temp:
          name: "{{ item.name }}"
          start_datetime: "{{ schedule_date_range[0] }}"
          end_datetime: "{{ schedule_date_range[1] }}"
          end_date: "{{ schedule_date_range[1].split('@')[0] }}"
      loop: "{{ schedule_objects.gathered }}"
      when:
        - item.type == 'non-recurring'
        - item.non_recurring_date_time is defined
        - item.non_recurring_date_time | length > 0
      register: schedule_parse_results

    - name: Filter expiring schedules
      set_fact:
        expiring_schedules: "{{ expiring_schedules | default([]) + [item.ansible_facts.schedule_info] }}"
      when:
        - item is not skipped
        - item.ansible_facts is defined
        - item.ansible_facts.schedule_info.end_date >= current_date
        - item.ansible_facts.schedule_info.end_date <= warning_date
      loop: "{{ schedule_parse_results.results }}"

    # Debug expiring schedules
    - name: Debug expiring schedules
      debug:
        var: expiring_schedules
        verbosity: 1

    - name: Gather security rules
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: security_rules
      when: expiring_schedules is defined and expiring_schedules | length > 0

    # Debug security rules
    - name: Debug security rules
      debug:
        msg: "Processing rules with schedules: {{ security_rules.gathered | selectattr('schedule', 'defined') | map(attribute='rule_name') | list }}"
        verbosity: 1

    - name: Find affected rules
      set_fact:
        affected_rules: "{{ affected_rules | default([]) + [rule_info] }}"
      vars:
        schedule_names: "{{ expiring_schedules | map(attribute='name') | list }}"
        matching_schedule: "{{ expiring_schedules | selectattr('name', 'equalto', item.schedule) | first }}"
        rule_info:
          name: "{{ item.rule_name }}"
          schedule: "{{ item.schedule }}"
          schedule_end: "{{ matching_schedule.end_datetime }}"
          action: "{{ item.action }}"
          source_zone: "{{ item.source_zone | default(['any']) | join(', ') }}"
          destination_zone: "{{ item.destination_zone | default(['any']) | join(', ') }}"
          source_ip: "{{ item.source_ip | default(['any']) | join(', ') }}"
          destination_ip: "{{ item.destination_ip | default(['any']) | join(', ') }}"
          application: "{{ item.application | default(['any']) | join(', ') }}"
          service: "{{ item.service | default(['application-default']) | join(', ') }}"
          description: "{{ item.description | default('No description') }}"
      loop: "{{ security_rules.gathered | selectattr('schedule', 'defined') | list }}"
      when: item.schedule in schedule_names
      loop_control:
        label: "Processing rule: {{ item.rule_name }}"

    - name: Show results
      debug:
        msg: |
          === Rules with expiring schedules ===
          {% for rule in affected_rules %}
          Rule: {{ rule.name }}
          Schedule: {{ rule.schedule }} (expires: {{ rule.schedule_end }})
          Action: {{ rule.action }}
          Source Zone: {{ rule.source_zone }}
          Destination Zone: {{ rule.destination_zone }}
          Source IP: {{ rule.source_ip }}
          Destination IP: {{ rule.destination_ip }}
          Application: {{ rule.application }}
          Service: {{ rule.service }}
          {% if rule.description != 'No description' %}
          Description: {{ rule.description }}
          {% endif %}
          ----------------------------------------
          {% endfor %}
      when: affected_rules is defined and affected_rules | length > 0