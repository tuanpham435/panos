---
- name: Check PAN-OS schedule objects and related security rules
  hosts: panorama
  connection: local
  gather_facts: false
  
  vars:
    provider:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"
    warning_days: 7
      
  tasks:
    - name: Get current date and warning date
      ansible.builtin.set_fact:
        current_date: "{{ lookup('pipe', 'date +%Y/%m/%d') }}"
        warning_date: "{{ lookup('pipe', 'date -d \"+{{ warning_days }} days\" +%Y/%m/%d') }}"

    - name: Display dates
      ansible.builtin.debug:
        msg: |
          Current date: {{ current_date }}
          Warning date: {{ warning_date }}

    - name: Gather all schedule objects
      paloaltonetworks.panos.panos_schedule_object:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: schedule_objects

    - name: Process and filter expiring schedules
      ansible.builtin.set_fact:
        expiring_schedules: >-
          {% set result = [] %}
          {% for schedule in schedule_objects.gathered %}
            {% if schedule.type == 'non-recurring' and schedule.non_recurring_date_time is defined %}
              {% for datetime_range in schedule.non_recurring_date_time %}
                {% set split_range = datetime_range.split('-') %}
                {% if split_range|length == 2 %}
                  {% set end_full = split_range[1] %}
                  {% set end_date = end_full.split('@')[0] %}
                  {% if end_date >= current_date and end_date <= warning_date %}
                    {% set schedule_info = schedule | combine({
                      'start_datetime': split_range[0],
                      'end_datetime': end_full,
                      'end_date': end_date,
                      'end_time': end_full.split('@')[1]
                    }) %}
                    {% set _ = result.append(schedule_info) %}
                  {% endif %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
          {{ result }}

    - name: Display expiring schedules
      ansible.builtin.debug:
        msg: |
          Found {{ expiring_schedules|length }} expiring schedule(s):
          {% for schedule in expiring_schedules %}
          - Schedule: {{ schedule.name }}
            Time Range: {{ schedule.start_datetime }} - {{ schedule.end_datetime }}
          {% endfor %}
      when: expiring_schedules is defined

    - name: Gather security rules
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: security_rules
      when: expiring_schedules|length > 0

    - name: Filter affected security rules
      ansible.builtin.set_fact:
        affected_rules: >-
          {% set result = [] %}
          {% for rule in security_rules.gathered %}
            {% if rule.schedule in (expiring_schedules | map(attribute='name') | list) %}
              {% set schedule = (expiring_schedules | selectattr('name', 'equalto', rule.schedule) | first) %}
              {% set rule_info = {
                'name': rule.rule_name,
                'schedule': rule.schedule,
                'schedule_end': schedule.end_datetime,
                'action': rule.action,
                'source_zone': rule.source_zone | join(', '),
                'destination_zone': rule.destination_zone | join(', '),
                'source_ip': rule.source_ip | join(', '),
                'destination_ip': rule.destination_ip | join(', '),
                'application': rule.application | join(', '),
                'service': rule.service | join(', '),
                'description': rule.description | default('No description')
              } %}
              {% set _ = result.append(rule_info) %}
            {% endif %}
          {% endfor %}
          {{ result }}
      when: security_rules is defined and security_rules.gathered is defined

    - name: Display affected rules
      ansible.builtin.debug:
        msg: |
          Found {{ affected_rules|length }} rule(s) with expiring schedules:
          {% for rule in affected_rules %}
          Rule: {{ rule.name }}
          - Schedule: {{ rule.schedule }} (expires: {{ rule.schedule_end }})
          - Description: {{ rule.description }}
          - Action: {{ rule.action }}
          - Source Zone: {{ rule.source_zone }}
          - Destination Zone: {{ rule.destination_zone }}
          - Source IP: {{ rule.source_ip }}
          - Destination IP: {{ rule.destination_ip }}
          - Application: {{ rule.application }}
          - Service: {{ rule.service }}
          {% endfor %}
      when: affected_rules is defined and affected_rules|length > 0