---
- name: Check PAN-OS schedule objects and related security rules
  hosts: panorama
  connection: local
  gather_facts: false
  
  vars:
    provider:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"
    warning_days: 7
      
  tasks:
    - name: Get current date and warning date
      ansible.builtin.set_fact:
        current_date: "{{ lookup('pipe', 'date +%Y/%m/%d') }}"
        warning_date: "{{ lookup('pipe', 'date -d \"+{{ warning_days }} days\" +%Y/%m/%d') }}"

    - name: Display dates
      ansible.builtin.debug:
        msg: |
          Current date: {{ current_date }}
          Warning date: {{ warning_date }}

    - name: Gather all schedule objects
      paloaltonetworks.panos.panos_schedule_object:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: schedule_objects

    # Debug task để xem cấu trúc dữ liệu
    - name: Debug schedule objects
      ansible.builtin.debug:
        var: schedule_objects

    - name: Process and filter expiring schedules
      ansible.builtin.set_fact:
        expiring_schedules: >-
          {% set result = [] %}
          {% for schedule in schedule_objects.gathered %}
            {% for datetime_range in schedule.non_recurring_date_time %}
              {% set split_range = datetime_range.split('-') %}
              {% set end_full = split_range[1] %}
              {% set end_date = end_full.split('@')[0] %}
              {% if end_date >= current_date and end_date <= warning_date %}
                {% set _ = result.append({
                  'name': schedule.name,
                  'start_datetime': split_range[0],
                  'end_datetime': end_full,
                  'end_date': end_date,
                  'end_time': end_full.split('@')[1]
                }) %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          {{ result }}

    # Debug task để xem kết quả xử lý
    - name: Debug expiring schedules
      ansible.builtin.debug:
        var: expiring_schedules

    - name: Display expiring schedules summary
      ansible.builtin.debug:
        msg: |
          Found expiring schedules:
          {% for schedule in expiring_schedules %}
          - Name: {{ schedule.name }}
            End Date: {{ schedule.end_date }}
            End Time: {{ schedule.end_time }}
          {% endfor %}
      when: expiring_schedules | length > 0

    - name: Gather security rules
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: security_rules
      when: expiring_schedules | length > 0

    - name: Filter affected security rules
      ansible.builtin.set_fact:
        affected_rules: >-
          {% set result = [] %}
          {% for rule in security_rules.gathered %}
            {% for schedule in expiring_schedules %}
              {% if rule.schedule == schedule.name %}
                {% set _ = result.append({
                  'name': rule.rule_name,
                  'schedule': schedule.name,
                  'schedule_end': schedule.end_datetime,
                  'action': rule.action,
                  'source_zone': rule.source_zone | join(', '),
                  'destination_zone': rule.destination_zone | join(', '),
                  'source_ip': rule.source_ip | join(', '),
                  'destination_ip': rule.destination_ip | join(', '),
                  'application': rule.application | join(', '),
                  'service': rule.service | join(', '),
                  'description': rule.description | default('No description')
                }) %}
              {% endif %}
            {% endfor %}
          {% endfor %}
          {{ result }}
      when: security_rules is defined and security_rules.gathered is defined

    - name: Display affected rules
      ansible.builtin.debug:
        msg: |
          Found rules with expiring schedules:
          {% for rule in affected_rules %}
          Rule: {{ rule.name }}
          - Schedule: {{ rule.schedule }} (expires: {{ rule.schedule_end }})
          - Action: {{ rule.action }}
          - Source Zone: {{ rule.source_zone }}
          - Destination Zone: {{ rule.destination_zone }}
          - Source IP: {{ rule.source_ip }}
          - Destination IP: {{ rule.destination_ip }}
          - Application: {{ rule.application }}
          - Service: {{ rule.service }}
          {% endfor %}
      when: affected_rules | length > 0