---
- name: Check PAN-OS schedule objects and related security rules
  hosts: panorama
  connection: local
  gather_facts: false
  
  vars:
    provider:
      ip_address: "{{ ip_address }}"
      username: "{{ username }}"
      password: "{{ password }}"
    warning_days: 7
      
  tasks:
    - name: Get current date and warning date
      ansible.builtin.set_fact:
        current_date: "{{ lookup('pipe', 'date +%Y/%m/%d') }}"
        warning_date: "{{ lookup('pipe', 'date -d \"+{{ warning_days }} days\" +%Y/%m/%d') }}"

    - name: Gather schedule objects
      paloaltonetworks.panos.panos_schedule_object:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: schedule_objects

    - name: Process schedules and filter expiring ones
      set_fact:
        expiring_schedules: |
          {% set result = [] %}
          {% for schedule in schedule_objects.gathered %}
            {% if schedule.type == 'non-recurring' and schedule.non_recurring_date_time is defined %}
              {% for datetime_range in schedule.non_recurring_date_time %}
                {% set split_range = datetime_range.split('-') %}
                {% if split_range|length == 2 %}
                  {% set end_full = split_range[1] %}
                  {% set end_date = end_full.split('@')[0] %}
                  {% if end_date >= current_date and end_date <= warning_date %}
                    {% set schedule_info = {
                      'name': schedule.name,
                      'start_datetime': split_range[0],
                      'end_datetime': end_full,
                      'end_date': end_date,
                      'datetime_range': datetime_range
                    } %}
                    {% set _ = result.append(schedule_info) %}
                  {% endif %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
          {{ result }}

    - name: Gather security rules
      paloaltonetworks.panos.panos_security_rule:
        provider: "{{ provider }}"
        state: "gathered"
        gathered_filter: '*'
      register: security_rules
      when: expiring_schedules|from_yaml|length > 0

    - name: Find affected rules
      set_fact:
        affected_rules: |
          {% set result = [] %}
          {% for rule in security_rules.gathered %}
            {% if rule.schedule is defined and rule.schedule in (expiring_schedules|from_yaml|map(attribute='name')|list) %}
              {% set schedule = (expiring_schedules|from_yaml|selectattr('name', 'equalto', rule.schedule)|first) %}
              {% set rule_info = {
                'name': rule.rule_name,
                'schedule': rule.schedule,
                'schedule_end': schedule.end_datetime,
                'schedule_range': schedule.datetime_range,
                'action': rule.action|default('N/A'),
                'source_zone': rule.source_zone|default(['any'])|join(', '),
                'destination_zone': rule.destination_zone|default(['any'])|join(', '),
                'source_ip': rule.source_ip|default(['any'])|join(', '),
                'destination_ip': rule.destination_ip|default(['any'])|join(', '),
                'application': rule.application|default(['any'])|join(', '),
                'service': rule.service|default(['application-default'])|join(', '),
                'description': rule.description|default('')
              } %}
              {% set _ = result.append(rule_info) %}
            {% endif %}
          {% endfor %}
          {{ result }}
      when: security_rules.gathered is defined and expiring_schedules|from_yaml|length > 0

    - name: Show final results
      debug:
        msg: |
          === Rules with expiring schedules ===
          {% for rule in affected_rules|from_yaml %}
          Rule: {{ rule.name }}
          Schedule: {{ rule.schedule }}
          Schedule Range: {{ rule.schedule_range }}
          Action: {{ rule.action }}
          Source Zone: {{ rule.source_zone }}
          Destination Zone: {{ rule.destination_zone }}
          Source IP: {{ rule.source_ip }}
          Destination IP: {{ rule.destination_ip }}
          Application: {{ rule.application }}
          Service: {{ rule.service }}
          {%- if rule.description %}
          Description: {{ rule.description }}
          {%- endif %}

          {% endfor %}
      when: affected_rules is defined and affected_rules|from_yaml|length > 0

    - name: Show no results message
      debug:
        msg: "No security rules found with expiring schedules"
      when: not affected_rules is defined or affected_rules|from_yaml|length == 0